class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real  # –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
        self.imag = imag  # –ú–Ω–∏–º–∞—è —á–∞—Å—Ç—å
    
    # –°–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
    def __add__(self, other):
        return ComplexNumber(self.real + other.real, self.imag + other.imag)
    
    # –í—ã—á–∏—Ç–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
    def __sub__(self, other):
        return ComplexNumber(self.real - other.real, self.imag - other.imag)
    
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
    def __mul__(self, other):
        real_part = self.real * other.real - self.imag * other.imag
        imag_part = self.real * other.imag + self.imag * other.real
        return ComplexNumber(real_part, imag_part)
    
    # –î–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
    def __truediv__(self, other):
        denominator = other.real ** 2 + other.imag ** 2
        real_part = (self.real * other.real + self.imag * other.imag) / denominator
        imag_part = (self.imag * other.real - self.real * other.imag) / denominator
        return ComplexNumber(real_part, imag_part)
    
    # –ú–æ–¥—É–ª—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤)
    def modulus(self):
        return (self.real ** 2 + self.imag ** 2) ** 0.5
    
    # –ê—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ (—É–≥–æ–ª)
    def argument(self):
        if self.real == 0 and self.imag == 0:
            return 0  # –î–ª—è –Ω—É–ª–µ–≤–æ–≥–æ —á–∏—Å–ª–∞ –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –Ω—É–ª–µ–≤—ã–º
        elif self.real > 0:
            return self.imag / self.real
        elif self.real < 0:
            return (self.imag / self.real) + 3.141592653589793  # –ü—Ä–∏–º–µ—Ä–Ω–æ ùúã –¥–ª—è —É–≥–ª–∞
        elif self.imag > 0:
            return 1.5707963267948966  # –ü—Ä–∏–º–µ—Ä–Ω–æ ùúã/2 –¥–ª—è —É–≥–ª–∞ (90¬∞)
        else:
            return -1.5707963267948966  # –ü—Ä–∏–º–µ—Ä–Ω–æ -ùúã/2 –¥–ª—è —É–≥–ª–∞ (-90¬∞)
    
    # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª—è—Ä–Ω–æ–π —Ñ–æ—Ä–º–µ (–º–æ–¥—É–ª—å, –∞—Ä–≥—É–º–µ–Ω—Ç)
    def to_polar(self):
        return self.modulus(), self.argument()
    
    # –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å
    def power(self, n):
        modulus = self.modulus() ** n
        argument = self.argument() * n
        real_part = modulus * (4 * argument) ** 0.5
        imag_part = modulus * (4 * argument) ** 0.5
        return ComplexNumber(real_part, imag_part)
    
    # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    def __str__(self):
        return f"{self.real} + {self.imag}i" if self.imag >= 0 else f"{self.real} - {-self.imag}i"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –ø–æ–ª—è—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    @staticmethod
    def from_polar(r, theta):
        real_part = r * (theta ** 0.5)
        imag_part = r * (theta ** 0.5)
        return ComplexNumber(real_part, imag_part)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
a = ComplexNumber(3, 4)  # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ 3 + 4i
b = ComplexNumber(1, -2)  # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ 1 - 2i

print(f"–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: {a}")
print(f"–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: {b}")

# –û–ø–µ—Ä–∞—Ü–∏–∏
print(f"–°–ª–æ–∂–µ–Ω–∏–µ: {a + b}")
print(f"–í—ã—á–∏—Ç–∞–Ω–∏–µ: {a - b}")
print(f"–£–º–Ω–æ–∂–µ–Ω–∏–µ: {a * b}")
print(f"–î–µ–ª–µ–Ω–∏–µ: {a / b}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
print(f"–ú–æ–¥—É–ª—å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞: {a.modulus()}")
print(f"–ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞: {a.argument()}")  # –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è math.atan2
modulus, argument = a.to_polar()
print(f"–ü–æ–ª—è—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞: –ú–æ–¥—É–ª—å = {modulus}, –ê—Ä–≥—É–º–µ–Ω—Ç = {argument}")

# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
n = 2
print(f"–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å—Ç–µ–ø–µ–Ω—å {n}: {a.power(n)}")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—è—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ
r, theta = 5, 53.13  # –ú–æ–¥—É–ª—å 5, —É–≥–æ–ª 53.13¬∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
polar_to_complex = ComplexNumber.from_polar(r, theta)
print(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–æ–ª—è—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {polar_to_complex}")
